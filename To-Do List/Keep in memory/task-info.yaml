type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |+
    const path = require('path');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const {StageTest, correct, wrong} = require('hs-test-web');

    class TodoTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                if (document.title !== 'To-Do List') {
                    return wrong("The title of the page should be 'To-Do List'")
                }

                return correct();
            }),
            this.page.execute(() => {

                let taskList = document.getElementById("task-list")

                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                const numberOfTasks = tasks.length;
                let counter = 0;

                while (true) {

                    if (counter > numberOfTasks) {
                        return wrong("Looks like after deleting a task it is not removed from the task list!")
                    }

                    const deleteButton = document.querySelector("button.delete-btn")
                    if (deleteButton === null) {
                        break
                    }
                    deleteButton.click()

                    counter++
                }

                taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")

                tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 0) {
                    return wrong("After deleting all the tasks there shouldn't be any <li> tag")
                }

                return correct()
            }),
            this.page.execute(() => {
                const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']

                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return wrong("Can't find button with id '#add-task-button'")

                const taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let currentTaskCounter = 1;

                for (let taskName of tasksName) {
                    inputField.value = taskName
                    addButton.click()

                    const tasks = taskList.getElementsByTagName("li")

                    if (tasks.length !== currentTaskCounter) {
                        return wrong("After adding a task number of the <li> tags is not increased!")
                    }

                    currentTaskCounter++
                }

                return correct()
            }),
            this.page.execute(() => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")
                if (tasks.length !== 5)
                    return wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }


                return correct();
            }),
            this.page.execute(() => {
                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")

                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === 'Third task') {
                        const checkbox = task.querySelector("input[type=checkbox]")
                        checkbox.click()
                        break;
                    }
                }

                tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")

                    if (taskName === null) {
                        return wrong("After marking a task as completed can not find a <span> tag with 'task' class inside <li> tag")
                    }

                    if (taskName.textContent === 'Third task') {
                        let taskName = task.querySelector("span.task")
                        if (taskName === null)
                            return wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                        if (!taskName.style.textDecoration.includes("line-through") &&
                            !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                            return wrong("If checkbox is checked the task name should be crossed out.\n" +
                                "The span tag with task name should have 'text-decoration: line-trough' style")
                        }

                        return correct()
                    }
                }

                return wrong("Can't find task with name 'Third task' after it was added!")
            }),
            this.node.execute(async () => {
                await this.page.refresh()
                return correct()
            }),
            this.page.execute(async () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 5) {
                    return wrong("Looks like you didn't store the tasks in the local storage.\n" +
                        "After refreshing the page expected 5 tasks!")
                }

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new TodoTest().runTests()
    }, 30000)

  learner_created: false
- name: src/style.css
  visible: true
  text: |-
    body {
        display: flex;
        flex-flow: column;
        justify-content: center;
        align-items: center;
        font-family: smooch, sans-serif;
    }

    header {
        min-width: 30em;
        display: flex;
        flex-flow: row wrap;
        align-items: flex-start;
        justify-content: center;
    }

    header h1 {
        color: #471199;
        width: 100%;
        text-align: center;
    }

    #input-task-group {
        display: flex;
        flex-flow: column wrap;
        align-items: flex-start;
        justify-content: flex-start;
        align-self: center;
        background: #222222;
    }

    #input-task {
        padding: 5px 0;
        border: none;
        border-bottom: 2px solid gray;
        outline: 0;
        transition: border-color 0.2s;

        min-width: 20vw;
        align-self: flex-end;
    }

    #input-task:focus::placeholder {
        color: transparent;
    }

    #input-task::placeholder {
        font-size: 24px;
        color: white;
    }

    #input-task:focus {
        border-image: linear-gradient(to right, #471199, #bb38ef) 1;
    }

    #add-task-button {
        align-self: flex-end;
        margin-left: 1em;
        min-width: 6em;
        min-height: 3em;
        background-image: linear-gradient(to right, #471199, #bb38ef);
        border-image: linear-gradient(to right, #bb38ef, #471199) 1;
        border-radius: 5px;
    }

    #add-task-button:hover {
        background-image: linear-gradient(to right, #bb38ef, #471199);
        border-image: linear-gradient(to right, #471199, #bb38ef) 1;
    }

    #tasks-list {
        width: 30em;
        margin: 2em;
        align-self: center;

        padding: 0;

        display: flex;
        flex-flow: column;
        justify-content: flex-start;
        align-items: flex-start;

        list-style: none;
    }

    #task-list li {
        margin: 0.5em;
        list-style: none;
        display: flex;
        align-self: flex-start;
        justify-self: flex-start;
    }

    .task {
        margin-left: 0.5em;
        min-width: 20vw;
        width: 20vw;
    }

    .done-task {
        color: gray;
        text-decoration: line-through;
    }

    .delete-btn {
        border: none;
        background: transparent;
    }

    .delete-btn img {
        width: 20px;
        height: 20px;
    }

    .delete-btn img:hover {
        width: 18px;
        height: 18px;
    }

    .delete-btn img:active {
        width: 16px;
        height: 16px;
    }

    .task-checkbox:checked + span {
        color: gray;
        text-decoration: line-through;
    }
  learner_created: true
- name: src/script.js
  visible: true
  text: |-
    let inputTaskField = document.getElementById("input-task");
    let tasksList = document.getElementById("task-list");


    document.getElementById("add-task-button").addEventListener("click", function () {
        let inputTaskName = inputTaskField.value;
        if (inputTaskName === "") {
            return;
        }

        inputTaskField.value = "";

        let newTask = document.createElement("li");
        tasksList.appendChild(newTask);

        let taskCheckBox = document.createElement("input");
        taskCheckBox.type = "checkbox";
        taskCheckBox.addEventListener("change", e => {
            toggleTask(taskCheckBox);
        });

        let taskName = document.createElement("span");
        taskName.className = "task";
        taskName.textContent = inputTaskName;

        let taskDeleteButton = document.createElement("button");
        taskDeleteButton.className = "delete-btn";
        taskDeleteButton.innerHTML = `<img src="x.webp" alt="delete task">`;
        taskDeleteButton.addEventListener("click", function () {
            tasksList.removeChild(taskDeleteButton.parentNode);
        })

        newTask.appendChild(taskCheckBox);
        newTask.appendChild(taskName);
        newTask.appendChild(taskDeleteButton);
    });


    function toggleTask(checkBox) {
        if (checkBox.checked) {
            checkBox.nextElementSibling.classList.add("done-task");
        } else {
            checkBox.nextElementSibling.classList.remove("done-task");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13197#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 26 Jun 2022 03:36:24 UTC
record: -1
